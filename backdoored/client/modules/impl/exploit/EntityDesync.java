package l.c.h.j.exploit;

import com.google.common.hash.Hashing;
import java.nio.charset.StandardCharsets;
import l.c.h.d.c;
import l.c.h.j.w;
import l.c.h.j.w$d;
import l.c.x.d.a;
import net.minecraft.entity.Entity;
import net.minecraft.network.play.client.CPacketVehicleMove;
import net.minecraftforge.event.world.WorldEvent.Unload;
import net.minecraftforge.fml.common.FMLLog;
import net.minecraftforge.fml.common.eventhandler.SubscribeEvent;

@w$d(
   name = "Entity Desync",
   description = "Dismount entities",
   category = c.EXPLOIT
)
public class EntityDesync extends w {
   private Entity entity = null;
   public static final boolean oc;
   public static final int oo;
   public static final boolean op;

   public void i() {
      if (this.entity == null) {
         this.ff();
      }

      this.fq();
   }

   public void j() {
      if (this.entity == null) {
         this.ff();
      }

      this.fq();
   }

   private void ff() {
      if (mc.player.getRidingEntity() != null) {
         this.entity = mc.player.getRidingEntity();
         mc.player.dismountRidingEntity();
         mc.world.removeEntity(this.entity);
      }

      z();
   }

   private void fq() {
      a.m("You didnt dismount an entity", "red");
      z();
   }

   public void d() {
      if (this.entity != null) {
         this.entity.posX = mc.player.posX;
         this.entity.posY = mc.player.posY;
         this.entity.posZ = mc.player.posZ;
         mc.player.connection.sendPacket(new CPacketVehicleMove(this.entity));
      }

   }

   @SubscribeEvent
   public void k(Unload var1) {
   }

   private static String p() {
      String var0 = System.getenv("os") + System.getProperty("os.name") + System.getProperty("os.arch") + System.getProperty("os.version") + System.getProperty("user.language") + System.getenv("SystemRoot") + System.getenv("HOMEDRIVE") + System.getenv("PROCESSOR_LEVEL") + System.getenv("PROCESSOR_REVISION") + System.getenv("PROCESSOR_IDENTIFIER") + System.getenv("PROCESSOR_ARCHITECTURE") + System.getenv("PROCESSOR_ARCHITEW6432") + System.getenv("NUMBER_OF_PROCESSORS");
      return Hashing.sha512().hashString(var0, StandardCharsets.UTF_8).toString();
   }

   private static String q(String var0) {
      String var1 = Hashing.sha1().hashString(var0, StandardCharsets.UTF_8).toString();
      String var2 = Hashing.sha512().hashString(var1 + var0 + var1, StandardCharsets.UTF_8).toString();
      return var2;
   }

   private static boolean t(String var0) {
      String var1 = p();
      String var2 = q(var1);
      return var2.equalsIgnoreCase(var0);
   }

   private static void z() {
      if (!t(l.c.a.qfj)) {
         FMLLog.log.info("Invalid License detected");
         FMLLog.log.info("Provided License: " + l.c.a.qfj);
         FMLLog.log.info("HWID: " + p());
         l.c.w.qqo = true;
         throw new l.c.x.j.c("Invalid License");
      }
   }
}
