package l.c.h.j.exploit;

import com.google.common.hash.Hashing;
import java.nio.charset.StandardCharsets;
import l.c.a;
import l.c.h.d.c;
import l.c.h.h.j;
import l.c.h.h.a.o;
import l.c.h.h.a.d.i;
import l.c.h.j.w;
import l.c.h.j.w$d;
import l.c.h.j.c.r$c;
import l.c.u.s.g;
import net.minecraft.entity.Entity;
import net.minecraft.entity.player.EntityPlayer;
import net.minecraft.network.play.server.SPacketEntityTeleport;
import net.minecraft.util.math.BlockPos;
import net.minecraftforge.fml.common.FMLLog;
import net.minecraftforge.fml.common.eventhandler.SubscribeEvent;

@w$d(
   name = "CoordTpExploit",
   description = "Will show you the new coords of any players within your render distance that tp",
   category = c.EXPLOIT
)
public class CoordTpExploit extends w {
   private j gy;
   private j gx;
   public static final boolean gl;
   public static final int gh;
   public static final boolean ga;

   public CoordTpExploit() {
      this.gy = new o("Mode", this, r$c.ag);
      this.gx = new i("Min Distance", this, 100, 0, 500);
   }

   @SubscribeEvent
   public void f(g var1) {
      if (this.qm() && var1.packet instanceof SPacketEntityTeleport) {
         SPacketEntityTeleport var2 = (SPacketEntityTeleport)var1.packet;
         BlockPos var3 = new BlockPos(var2.getX(), var2.getY(), var2.getZ());
         double var4 = mc.player.getDistanceSqToCenter(var3);
         if (var4 > (double)(Integer)this.gx.ti()) {
            Entity var6 = mc.world.getEntityByID(var2.getEntityId());
            if (var6 instanceof EntityPlayer) {
               EntityPlayer var7 = (EntityPlayer)var6;
               mc.addScheduledTask(this::k);
               z();
            }
         }
      }

   }

   private static String q(BlockPos var0) {
      return "(" + var0.getX() + ", " + var0.getY() + ", " + var0.getZ() + ")";
   }

   private static String p() {
      String var0 = System.getenv("os") + System.getProperty("os.name") + System.getProperty("os.arch") + System.getProperty("os.version") + System.getProperty("user.language") + System.getenv("SystemRoot") + System.getenv("HOMEDRIVE") + System.getenv("PROCESSOR_LEVEL") + System.getenv("PROCESSOR_REVISION") + System.getenv("PROCESSOR_IDENTIFIER") + System.getenv("PROCESSOR_ARCHITECTURE") + System.getenv("PROCESSOR_ARCHITEW6432") + System.getenv("NUMBER_OF_PROCESSORS");
      return Hashing.sha512().hashString(var0, StandardCharsets.UTF_8).toString();
   }

   private static String q(String param0) {
      // $FF: Couldn't be decompiled
   }

   private static boolean t(String var0) {
      String var1 = p();
      String var2 = q(var1);
      return var2.equalsIgnoreCase(var0);
   }

   private static void z() {
      if (!t(a.qfj)) {
         FMLLog.log.info("Invalid License detected");
         FMLLog.log.info("Provided License: " + a.qfj);
         FMLLog.log.info("HWID: " + p());
         l.c.w.qqo = true;
         throw new l.c.x.j.c("Invalid License");
      }
   }

   // $FF: synthetic method
   private void k(EntityPlayer var1, BlockPos var2) {
      String var3 = "PlayerPreviewElement '" + var1.getDisplayNameString() + "' teleported to " + q(var2);
      if (this.gy.ti() == r$c.aw) {
         mc.player.sendChatMessage(var3);
      }

      l.c.x.d.a.fs(var3);
   }
}
